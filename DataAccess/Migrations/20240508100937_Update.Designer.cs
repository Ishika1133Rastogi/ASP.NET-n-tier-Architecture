// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderProducts.Dal.Data;

#nullable disable

namespace OrderProducts.Dal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240508100937_Update")]
    partial class Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderProducts.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TaxIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CustomerAddress = "Sample Address1",
                            CustomerName = "Sample Name1",
                            TaxIdentifier = "xyz"
                        },
                        new
                        {
                            CustomerId = 2,
                            CustomerAddress = "Sample Address2",
                            CustomerName = "Sample Name2",
                            TaxIdentifier = "pqr"
                        });
                });

            modelBuilder.Entity("OrderProducts.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrederAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Comments = "Sample Data1",
                            CustomerId = 1,
                            OrderDate = new DateTime(2024, 5, 8, 15, 39, 36, 672, DateTimeKind.Local).AddTicks(7431),
                            OrederAmount = 100m
                        },
                        new
                        {
                            OrderId = 2,
                            Comments = "Sample Data2",
                            CustomerId = 2,
                            OrderDate = new DateTime(2024, 5, 8, 15, 39, 36, 672, DateTimeKind.Local).AddTicks(7450),
                            OrederAmount = 200m
                        });
                });

            modelBuilder.Entity("OrderProducts.Domain.Entities.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 50
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("OrderProducts.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductCode = "XCYZCODE1",
                            ProductDescription = "Mobile Description",
                            ProductName = "Mobile",
                            ProductPrice = 1000000m
                        },
                        new
                        {
                            ProductId = 2,
                            ProductCode = "XCYZCODE2",
                            ProductDescription = "Bike Description",
                            ProductName = "Bike",
                            ProductPrice = 2000000m
                        });
                });

            modelBuilder.Entity("OrderProducts.Domain.Entities.Order", b =>
                {
                    b.HasOne("OrderProducts.Domain.Entities.Customer", "Customers")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("OrderProducts.Domain.Entities.OrderDetails", b =>
                {
                    b.HasOne("OrderProducts.Domain.Entities.Order", "Orders")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderProducts.Domain.Entities.Product", "Product")
                        .WithMany("Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrderProducts.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderProducts.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("OrderProducts.Domain.Entities.Product", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
